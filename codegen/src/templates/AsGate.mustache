import { allocString } from "./memory"

export declare function logInt(value: i32): void
export declare function logFloat(value: f32): void
export declare function logString(ptr: i32, len: i32): void
export function log(text: string): void {
  const ptr = allocString(text)
  logString(ptr, text.length)
  heap.free(ptr)
}

{{#functions}}
export declare function _{{funcName}} (
  funcId: i32,
{{#inputs}}
  {{#isInt32}}i{{index}}: i32{{/isInt32}}
  {{#isInt64}}l{{index}}: i64{{/isInt64}}
  {{#isFloat32}}f{{index}}: f32{{/isFloat32}}
  {{#isFloat64}}d{{index}}: f64{{/isFloat64}}
  {{#isString}}sPtr{{index}}: i32, sLen{{index}}: i32{{/isString}}
  {{^isLast}},{{/isLast}}
{{/inputs}}
): i32

export function {{funcName}} (
  funcId: i32,
{{#inputs}}
  {{#isInt32}}i{{index}}: i32{{/isInt32}}
  {{#isInt64}}l{{index}}: i64{{/isInt64}}
  {{#isFloat32}}f{{index}}: f32{{/isFloat32}}
  {{#isFloat64}}d{{index}}: f64{{/isFloat64}}
  {{#isString}}s{{index}}: string{{/isString}}
  {{^isLast}},{{/isLast}}
{{/inputs}}
): {{#output}}{{#isVoid}}void{{/isVoid}}{{#isInt32}}i32{{/isInt32}}{{#isInt64}}i64{{/isInt64}}{{#isFloat32}}f32{{/isFloat32}}{{#isFloat64}}f64{{/isFloat64}}{{#isArray}}[]{{/isArray}}{{/output}}
{
{{#inputs}}
{{#isString}}
  const sPtr{{index}} = allocString(s{{index}})
{{/isString}}
{{/inputs}}

  const ptr = _{{funcName}}(
    funcId,
{{#inputs}}
    {{#isInt32}}i{{index}}{{/isInt32}}
    {{#isInt64}}l{{index}}{{/isInt64}}
    {{#isFloat32}}f{{index}}{{/isFloat32}}
    {{#isFloat64}}d{{index}}{{/isFloat64}}
    {{#isString}}sPtr{{index}}, s{{index}}.length{{/isString}}
    {{^isLast}},{{/isLast}}
{{/inputs}}
  )
{{#inputs}}
{{#isString}}
  heap.free(sPtr{{index}})
{{/isString}}
{{/inputs}}

{{#output}}
{{#isInt32}}
const result: i32[] = []
for (let i = 0; i < {{length}}; i++) {
  result.push(load<i32>((ptr >> 2) + 4 * i))
}
{{/isInt32}}
{{#isInt64}}
const result: i64[] = []
for (let i = 0; i < {{length}}; i++) {
  result.push(load<i64>((ptr >> 3) + 8 * i))
}
{{/isInt64}}
{{#isFloat32}}
const result: f32[] = []
for (let i = 0; i < {{length}}; i++) {
  result.push(load<f32>((ptr >> 2) + 4 * i))
}
{{/isFloat32}}
{{#isFloat64}}
const result: f64[] = []
for (let i = 0; i < {{length}}; i++) {
  result.push(load<f64>((ptr >> 3) + 8 * i))
}
{{/isFloat64}}
{{#isArray}}return result{{/isArray}}
{{^isArray}}return result[0]{{/isArray}}
{{/output}}
}
{{/functions}}
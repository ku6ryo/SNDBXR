// This code is auto-generated please do not edit.

export class TypeScriptSandbox {
{{#functions}}
  {{funcName}}_Map = new Map<number, ({{#inputs}}v{{index}}: number{{^isLast}},{{/isLast}}{{/inputs}}) => number[]>()
{{/functions}}

  callEngine32(iTypes: number[], oTypes: number[], values: number[], funcId: number): number[] {
    let funcName = "callEngine_"
    oTypes.forEach(v => {
      if (v === 1) funcName += "i"
      if (v === 2) funcName += "f"
    })
    funcName += "_"
    iTypes.forEach(v => {
      if (v === 1) funcName += "i"
      if (v === 2) funcName += "f"
    })
    return this.getCallEngineFuncByName(funcName)(funcId, ...values)
  }

  getCallEngineFuncByName(name: string): any {
    switch (name) {
      {{#functions}}
        case "{{funcName}}":
          return this.{{funcName}}.bind(this)
      {{/functions}}
    }
  }

{{#functions}}
  {{funcName}} (
    funcId: number,
{{#inputs}}
    {{#isInt32}}i{{index}}: number{{/isInt32}}{{#isFloat32}}f{{index}}: number{{/isFloat32}},
{{/inputs}}
  ): number[] {
    const func = this.{{funcName}}_Map.get(funcId)
    if (!func) {
      throw new Error("no function")
    }
    return func(
{{#inputs}}
      {{#isInt32}}i{{index}}{{/isInt32}}{{#isFloat32}}f{{index}}{{/isFloat32}},
{{/inputs}}
    )
  }
{{/functions}}
}